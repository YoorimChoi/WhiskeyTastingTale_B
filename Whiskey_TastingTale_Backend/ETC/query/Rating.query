use Whiskey_TT; 

-------------------------------------------------------------------------------

CREATE TABLE Ratings (
    rating_id INT PRIMARY KEY IDENTITY, 
    whiskey_id INT NOT NULL, 
    rating FLOAT NOT NULL, 
    created_date DATETIME2,
    updated_date DATETIME2,
    CONSTRAINT FK_Ratings_Whiskeys FOREIGN KEY (whiskey_id) REFERENCES Whiskeys(whiskey_id)
)


-------------------------------------------------------------------------------

INSERT INTO Whiskey_TT.dbo.Ratings (whiskey_id, rating)
VALUES ( @whiskey_id, @rating); 


INSERT INTO Whiskey_TT.dbo.Ratings (whiskey_id, rating)
VALUES ( 1, 1.3); 
INSERT INTO Whiskey_TT.dbo.Ratings (whiskey_id, rating)
VALUES ( 2, 2.3); 


-------------------------------------------------------------------------------

CREATE TRIGGER UpdateCreatedDate_Ratings
ON Ratings
AFTER INSERT
AS
BEGIN
    UPDATE Ratings
    SET created_date = getDate() 
    FROM Ratings
    JOIN inserted ON Ratings.rating_id = inserted.rating_id;
END;


CREATE TRIGGER UpdateUpdatedDate_Ratings
ON Ratings
AFTER UPDATE
AS
BEGIN
    UPDATE Ratings
    SET updated_date = getDate()
    FROM Ratings
    JOIN inserted ON Ratings.rating_id = inserted.rating_id;
END;


-------------------------------------------------------------------------------

CREATE TRIGGER UpdateTotalRating_Reviews
ON Reviews
AFTER INSERT, UPDATE, DELETE
AS
BEGIN

    -- INSERT 또는 UPDATE 처리: 평균 평점 업데이트
    IF EXISTS (SELECT 1 FROM inserted)
    BEGIN
        MERGE Ratings AS target
        USING (SELECT whiskey_id FROM inserted) AS source
        ON target.whiskey_id = source.whiskey_id
        WHEN MATCHED THEN
            -- 리뷰가 추가되거나 수정되었을 때, 평균 평점을 다시 계산하여 업데이트
            UPDATE SET target.rating = (
                SELECT AVG(CAST(rating AS FLOAT))
                FROM Reviews
                WHERE whiskey_id = source.whiskey_id
            )
        WHEN NOT MATCHED THEN
            -- Ratings 테이블에 WhiskeyId가 없으면 새로운 행을 생성하고 초기 평균 평점을 설정
            INSERT (whiskey_id, rating)
            VALUES (
                source.whiskey_id,
                (SELECT AVG(CAST(rating AS FLOAT))
                 FROM Reviews
                 WHERE whiskey_id = source.whiskey_id)
            );
    END;

    -- DELETE 처리: 리뷰가 삭제될 때
    IF EXISTS (SELECT 1 FROM deleted)
    BEGIN
        MERGE Ratings AS target
        USING (SELECT whiskey_id FROM deleted) AS source
        ON target.whiskey_id = source.whiskey_id
        WHEN MATCHED AND EXISTS (
            -- 삭제 후에도 리뷰가 남아있는 경우 평균 평점을 다시 계산
            SELECT 1 FROM Reviews WHERE whiskey_id = source.whiskey_id
        ) THEN
            UPDATE SET target.rating = (
                SELECT AVG(CAST(rating AS FLOAT))
                FROM Reviews
                WHERE whiskey_id = source.whiskey_id
            )
        WHEN MATCHED AND NOT EXISTS (
            -- 삭제 후 해당 WhiskeyId에 대한 리뷰가 하나도 없을 경우 Ratings 테이블에서 해당 행 삭제
            SELECT 1 FROM Reviews WHERE whiskey_id = source.whiskey_id
        ) THEN
            DELETE;  -- Ratings 테이블에서 WhiskeyId 행 삭제
    END;
END;

